<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="398.56052"
   height="309.29846"
   viewBox="0 0 398.56052 309.29846"
   version="1.1"
   id="svg5"
   inkscape:version="1.1.1 (3bf5ae0d25, 2021-09-20)"
   sodipodi:docname="coffee-logo.svg"
   inkscape:export-filename="C:\Users\mathi\Documents\GitHub\website\images\coffee-logo.png"
   inkscape:export-xdpi="96"
   inkscape:export-ydpi="96"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview7"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:document-units="px"
     showgrid="false"
     inkscape:zoom="0.80212425"
     inkscape:cx="-53.607655"
     inkscape:cy="357.17658"
     inkscape:window-width="1920"
     inkscape:window-height="1027"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs2">
    <filter
       style="color-interpolation-filters:sRGB"
       inkscape:label="Drop Shadow"
       id="filter9463"
       x="-0.00030448126"
       y="-0.0018588451"
       width="1.0103236"
       height="1.054239">
      <feFlood
         flood-opacity="0.498039"
         flood-color="rgb(0,0,0)"
         result="flood"
         id="feFlood9453" />
      <feComposite
         in="flood"
         in2="SourceGraphic"
         operator="in"
         result="composite1"
         id="feComposite9455" />
      <feGaussianBlur
         in="composite1"
         stdDeviation="0.035260253"
         result="blur"
         id="feGaussianBlur9457" />
      <feOffset
         dx="2.7"
         dy="2.3"
         result="offset"
         id="feOffset9459" />
      <feComposite
         in="SourceGraphic"
         in2="offset"
         operator="over"
         result="composite2"
         id="feComposite9461" />
    </filter>
    <filter
       style="color-interpolation-filters:sRGB"
       inkscape:label="Lighting"
       id="filter13755"
       x="0"
       y="0"
       width="1"
       height="1">
      <feComponentTransfer
         result="component"
         id="feComponentTransfer13753">
        <feFuncR
           type="gamma"
           amplitude="0.718563"
           exponent="1.1976"
           offset="-0.011976"
           id="feFuncR13747" />
        <feFuncG
           type="gamma"
           amplitude="0.718563"
           exponent="1.1976"
           offset="-0.011976"
           id="feFuncG13749" />
        <feFuncB
           type="gamma"
           amplitude="0.718563"
           exponent="1.1976"
           offset="-0.011976"
           id="feFuncB13751" />
      </feComponentTransfer>
    </filter>
    <filter
       inkscape:label="Button"
       inkscape:menu="Bevels"
       inkscape:menu-tooltip="Soft bevel, slightly depressed middle"
       style="color-interpolation-filters:sRGB;"
       id="filter1838"
       x="-0.10391086"
       y="-0.16083119"
       width="1.2078217"
       height="1.3216624">
      <feGaussianBlur
         stdDeviation="2.3"
         in="SourceAlpha"
         result="result0"
         id="feGaussianBlur1812" />
      <feMorphology
         in="SourceAlpha"
         radius="6.6"
         result="result1"
         id="feMorphology1814" />
      <feGaussianBlur
         stdDeviation="8.9"
         in="result1"
         id="feGaussianBlur1816" />
      <feColorMatrix
         values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0.3 0"
         result="result91"
         id="feColorMatrix1818" />
      <feComposite
         in="result0"
         operator="out"
         result="result2"
         in2="result91"
         id="feComposite1820" />
      <feGaussianBlur
         stdDeviation="1.7"
         result="result4"
         id="feGaussianBlur1822" />
      <feDiffuseLighting
         surfaceScale="10"
         id="feDiffuseLighting1826">
        <feDistantLight
           azimuth="225"
           elevation="45"
           id="feDistantLight1824" />
      </feDiffuseLighting>
      <feBlend
         in2="SourceGraphic"
         mode="multiply"
         id="feBlend1828" />
      <feComposite
         in2="SourceAlpha"
         operator="in"
         result="result3"
         id="feComposite1830" />
      <feSpecularLighting
         in="result4"
         surfaceScale="5"
         specularExponent="17.9"
         id="feSpecularLighting1834">
        <feDistantLight
           azimuth="225"
           elevation="45"
           id="feDistantLight1832" />
      </feSpecularLighting>
      <feComposite
         in2="result3"
         operator="atop"
         id="feComposite1836" />
    </filter>
    <filter
       style="color-interpolation-filters:sRGB;"
       inkscape:label="Lighting"
       id="filter2868"
       x="0"
       y="0"
       width="1"
       height="1">
      <feComponentTransfer
         in="blur"
         result="component"
         id="feComponentTransfer2866">
        <feFuncR
           type="gamma"
           amplitude="1.31737"
           exponent="2.39521"
           offset="0.131737"
           id="feFuncR2860" />
        <feFuncG
           type="gamma"
           amplitude="1.31737"
           exponent="2.39521"
           offset="0.131737"
           id="feFuncG2862" />
        <feFuncB
           type="gamma"
           amplitude="1.31737"
           exponent="2.39521"
           offset="0.131737"
           id="feFuncB2864" />
      </feComponentTransfer>
    </filter>
  </defs>
  <g
     inkscape:groupmode="layer"
     id="layer2"
     inkscape:label="background"
     transform="translate(-884.09325,-331.24809)">
    <g
       id="g1946"
       transform="matrix(1.9243016,0,0,1.778687,-203.14569,-420.96793)"
       style="filter:url(#filter2868)">
      <path
         style="fill:#d0d0d0;fill-opacity:1;stroke-width:1.33333"
         d="m 668.554,572.34278 c 0.9625,-0.38516 2.1125,-0.33779 2.55555,0.10527 0.44306,0.44306 -0.34444,0.75819 -1.75,0.70029 -1.55325,-0.064 -1.8692,-0.37992 -0.80555,-0.80555 z m -58.51758,-34.75584 -3.23242,-3.66667 3.66666,3.23242 c 3.42706,3.02118 4.27812,4.10091 3.23242,4.10091 -0.23883,0 -1.88883,-1.65 -3.66666,-3.66666 z m -5.67687,-10.55556 c -1.42887,-1.42887 -1.02305,-16.44444 0.44445,-16.44444 0.73333,0 1.33333,-0.63541 1.33333,-1.41202 0,-0.77662 -0.59313,-1.04545 -1.31806,-0.59742 -0.75476,0.46647 -0.97997,-0.0664 -0.52695,-1.24699 0.4351,-1.13387 1.4302,-1.66661 2.21131,-1.18385 0.90527,0.55948 1.09476,0.0297 0.52263,-1.4613 -0.50192,-1.308 0.0544,-3.95054 1.26207,-5.99499 2.36511,-4.00382 7.18233,-7.65786 7.18233,-5.44806 0,0.73954 0.84766,1.34463 1.88369,1.34463 2.15749,0 1.71761,4.98161 -1.15271,13.0544 l -1.75843,4.9456 -0.96415,-3.66667 c -1.1543,-4.3898 -2.12602,-4.58619 -4.43088,-0.89552 -1.30445,2.08875 -1.3563,3.22217 -0.21057,4.60269 0.83602,1.00734 1.13003,3.06032 0.65336,4.56218 -0.5233,1.64878 -0.27164,2.73065 0.6352,2.73065 0.82603,0 1.17307,-0.53201 0.7712,-1.18226 -0.40187,-0.65024 0.16235,-1.9234 1.25382,-2.82924 1.71149,-1.42041 1.86931,-1.02848 1.14714,2.84892 -1.0441,5.60594 -6.52938,10.68309 -8.93878,8.27369 z m 28.08236,-10.80476 c -1.26752,-3.1315 -2.31377,-6.7315 -2.325,-8 -0.0177,-1.99584 -0.21228,-2.03709 -1.44559,-0.30635 -1.0891,1.52839 -1.25377,1.00027 -0.69833,-2.23958 0.39976,-2.33177 0.14436,-4.43375 -0.56757,-4.67105 -0.71192,-0.23731 -0.12607,-1.16112 1.30192,-2.05291 2.28242,-1.42539 2.92621,-1.08765 5.32489,2.79348 2.32783,3.76651 2.58064,5.57185 1.72141,12.29248 l -1.00715,7.87758 z m -5.17955,-30.63968 c -1.52558,-7.32399 -2.21017,-28.32934 -0.9487,-29.10898 0.67269,-0.41574 1.1035,-0.2613 0.95736,0.34321 -0.40303,1.66707 3.13806,8.43244 4.41366,8.43244 0.61563,0 1.11932,-0.58117 1.11932,-1.29149 0,-2.64828 4.00527,0.35676 4.1329,3.1008 0.11875,2.55297 0.23151,2.50301 1.05846,-0.46898 1.59753,-5.74133 4.97468,-4.87136 6.19805,1.59666 0.91834,4.85533 1.16179,5.1813 1.59533,2.13613 0.35344,-2.48258 1.10939,-3.36415 2.44522,-2.85155 1.30628,0.50127 1.68795,0.10182 1.17642,-1.23122 -0.83107,-2.16572 3.05309,-3.71643 8.72695,-3.48415 1.99701,0.0818 2.452,0.3705 1.13492,0.72025 -2.54885,0.67684 -4.30366,7.87126 -3.89555,15.97111 0.15327,3.04199 -0.36288,5.92741 -1.14701,6.41202 -0.8949,0.55308 -1.42569,-0.65747 -1.42569,-3.25152 v -4.13265 l -3.47024,3.21779 c -2.32009,2.15131 -5.74488,3.49107 -10.33333,4.04237 -9.03877,1.08598 -11.48676,1.05423 -11.73807,-0.15224 z m 9.54164,-3.11366 c 0,-0.62479 1.05,-0.7374 2.33333,-0.25026 1.35135,0.51297 0.71963,-0.61639 -1.50108,-2.68353 -4.4407,-4.13362 -6.16559,-3.66699 -6.16559,1.66798 0,3.14004 0.46109,3.67591 2.66667,3.09913 1.46667,-0.38354 2.66667,-1.20853 2.66667,-1.83332 z m 55.9576,-23.55301 c -0.0415,-3.58522 -0.0899,-3.60743 -2.17938,-1 -1.61804,2.0191 -1.94947,2.12033 -1.36483,0.41687 0.48823,-1.42257 -0.0586,-2.50541 -1.48729,-2.94498 -1.24269,-0.38235 0.53389,-0.39168 3.94796,-0.0207 3.41407,0.37095 9.59651,0.93453 13.73876,1.2524 10.74667,0.82468 13.32764,2.668 5.28013,3.77103 -4.4101,0.60448 -6.70236,0.37313 -7.39417,-0.74625 -0.75236,-1.21733 -1.63165,-1.05307 -3.52237,0.658 -3.89123,3.52152 -6.96909,2.91359 -7.01881,-1.38635 z m 6.70907,0.19068 c 0,-0.2882 -0.9,-0.52401 -2,-0.52401 -1.1,0 -2,0.58117 -2,1.29149 0,0.71031 0.9,0.94612 2,0.52401 1.1,-0.42211 2,-1.00328 2,-1.29149 z m -54.33334,-5.50406 c 3.48333,-0.27467 9.18333,-0.27467 12.66667,0 3.48333,0.27466 0.63333,0.49939 -6.33334,0.49939 -6.96666,0 -9.81666,-0.22473 -6.33333,-0.49939 z m 22.66667,0.0609 c 1.28333,-0.33537 3.38333,-0.33537 4.66667,0 1.28333,0.33537 0.23333,0.60976 -2.33334,0.60976 -2.56666,0 -3.61666,-0.27439 -2.33333,-0.60976 z"
         id="path1960" />
      <path
         style="fill:#b9b9b9;fill-opacity:1;stroke-width:1.33333"
         d="m 635.70263,540.03138 c 0.0461,-0.42778 -0.0622,-1.22778 -0.24074,-1.77778 -0.17851,-0.55 -0.47456,-1.6 -0.65789,-2.33333 -0.18334,-0.73333 -0.45424,-1.48333 -0.60202,-1.66667 -1.02181,-1.26768 -5.30493,-21.61719 -5.26195,-24.99999 0.0322,-2.52979 0.44904,-2.03516 1.72938,2.05184 0.92786,2.96185 2.36948,6.56185 3.2036,8 1.31245,2.26289 1.55649,1.80727 1.8132,-3.38518 0.16316,-3.3 0.30828,-7.34312 0.32251,-8.9847 0.0179,-2.06294 0.45351,-2.5574 1.41057,-1.60107 1.37852,1.37746 3.57133,31.21468 2.49934,34.00824 -0.57218,1.49109 -4.36932,2.11131 -4.216,0.68864 z m -27.9275,-5.85703 c -2.94923,-3.82537 -2.65974,-5.86307 1.15291,-8.11526 2.13178,-1.25927 3.87596,-3.39246 3.87596,-4.74042 0,-1.34796 1.16917,-6.26404 2.59817,-10.92462 3.82696,-12.48142 4.24358,-15.80711 1.9802,-15.80711 -2.74494,0 -2.35836,-3.66713 0.5507,-5.22402 2.84721,-1.52378 5.53759,0.4233 5.53759,4.00765 0,1.23767 -1.79652,6.08938 -3.99226,10.78159 -2.40345,5.13603 -4.6049,12.86332 -5.53164,19.41647 -1.49539,10.5742 -3.51724,14.04867 -6.17163,10.60572 z m 42.3622,-46.32916 c -1.22891,-0.84032 -6.24101,-1.04333 -13,-0.52656 -7.88229,0.60266 -11,0.4069 -11,-0.69069 0,-0.84244 0.61703,-1.15037 1.37117,-0.68428 0.75414,0.46608 5.17671,0.43989 9.82793,-0.0582 6.29228,-0.67384 9.35397,-1.73757 11.96217,-4.15603 l 3.5054,-3.25039 v 4.13265 c 0,2.59405 0.53079,3.8046 1.42569,3.25152 0.78413,-0.48461 1.30028,-3.37003 1.14701,-6.41202 -0.67467,-13.39016 1.77255,-16.97208 11.4273,-16.72577 l 4,0.10204 -4.16981,1.20883 c -4.68895,1.35934 -6.50779,4.89174 -7.7054,14.96481 -1.03091,8.6709 -4.27382,11.93323 -8.79146,8.84411 z m 69.4386,-18.03603 c 0.064,-1.55326 0.37992,-1.8692 0.80556,-0.80555 0.38516,0.9625 0.33779,2.1125 -0.10527,2.55555 -0.44306,0.44306 -0.75819,-0.34444 -0.70029,-1.75 z m -94.66667,-8 c 0.064,-1.55326 0.37992,-1.8692 0.80556,-0.80555 0.38516,0.9625 0.33779,2.1125 -0.10527,2.55555 -0.44306,0.44306 -0.75819,-0.34444 -0.70029,-1.75 z m 60.86151,-1.8133 c -0.39625,-1.51526 -2.53681,-3.12613 -5.15551,-3.87975 l -4.47793,-1.28867 4,-0.10204 c 7.24189,-0.18475 9.65583,1.06083 8.97349,4.63026 -0.74337,3.88872 -2.40715,4.20762 -3.34005,0.6402 z m 14.12907,0.25775 c 1.58564,-1.58524 2.63908,-1.86308 3.28571,-0.8666 0.52348,0.80671 1.85178,1.80934 2.95178,2.22807 1.1,0.41874 -0.37857,0.8087 -3.28571,0.8666 -5.03424,0.10025 -5.17467,-0.006 -2.95178,-2.22807 z m 11.23749,0.059 c 1.65,-0.3178 4.35,-0.3178 6,0 1.65,0.3178 0.3,0.57782 -3,0.57782 -3.3,0 -4.65,-0.26002 -3,-0.57782 z m -7.91666,-3.96984 c 0.9625,-0.38516 2.1125,-0.33779 2.55555,0.10526 0.44306,0.44306 -0.34444,0.75819 -1.75,0.70029 -1.55326,-0.064 -1.8692,-0.37992 -0.80555,-0.80555 z"
         id="path1958" />
      <path
         style="fill:#a3a3a3;fill-opacity:1;stroke-width:1.33333"
         d="m 652.02504,567.86152 c -4.87313,-2.43568 -11.22104,-10.01287 -11.22104,-13.39401 0,-0.81958 2.12088,0.372 4.71306,2.64797 2.59218,2.27597 5.84933,4.13812 7.2381,4.13812 2.92041,0 7.0724,-3.67717 6.03934,-5.34869 -0.38536,-0.62354 -0.13408,-1.48388 0.55842,-1.91187 2.25102,-1.39121 2.88716,4.09104 0.91565,7.89112 -1.05612,2.03568 -1.6268,4.46589 -1.26817,5.40047 1.15855,3.01913 -1.62803,3.24959 -6.97536,0.57689 z m -39.28702,-28.67814 c -2.11426,-2.25053 -2.69665,-3.71854 -1.71911,-4.33334 0.8131,-0.51137 2.07092,-4.82977 2.79516,-9.59644 l 1.3168,-8.66666 0.32054,8.66666 c 0.1763,4.76667 0.46706,10.61667 0.64614,13 0.17909,2.38334 0.21588,4.33334 0.0818,4.33334 -0.13411,0 -1.6827,-1.5316 -3.44131,-3.40356 z m 23.17709,1.46221 c 0,-1.06774 0.50979,-1.62628 1.13286,-1.2412 0.62307,0.38508 0.78766,1.25868 0.36575,1.94135 -1.07816,1.7445 -1.49861,1.54807 -1.49861,-0.70015 z m 3.78103,-16.39448 c -0.30203,-10.72337 -1.06136,-16.71557 -2.40736,-18.9975 -1.68225,-2.852 -1.49639,-2.78047 1.28712,0.49533 2.18673,2.57348 3.46573,6.03958 3.90129,10.57254 0.73713,7.67152 -0.29056,23.60006 -1.52241,23.59629 -0.4496,-10e-4 -1.01598,-7.05137 -1.25864,-15.66666 z m -24.12021,-10.44195 c 0.064,-1.55326 0.37992,-1.8692 0.80555,-0.80555 0.38516,0.9625 0.33779,2.1125 -0.10526,2.55555 -0.44306,0.44306 -0.75819,-0.34444 -0.7003,-1.75 z m 1.25222,-3.59988 c -0.0133,-0.57438 1.47585,-4.00443 3.30918,-7.62234 3.60208,-7.10836 4.13506,-10.66494 1.92884,-12.87116 -2.14923,-2.14923 24.0607,-3.68394 28.48534,-1.66794 4.70822,2.1452 7.3911,-0.75209 8.37728,-9.04676 1.59326,-13.40092 4.96199,-16.38769 18.50484,-16.4067 l 5.29629,-0.007 -2.80218,-2.80218 c -1.5412,-1.5412 -4.82453,-3.27979 -7.29629,-3.86352 -3.7112,-0.87644 -3.91342,-1.08382 -1.16078,-1.19038 5.98653,-0.23176 13.59928,2.58509 14.30771,5.29411 0.42755,1.63495 1.94045,2.6313 4.18113,2.75358 1.93113,0.10538 -1.45821,0.62475 -7.53189,1.15415 -6.07367,0.5294 -11.37803,1.29754 -11.78747,1.70697 -0.40943,0.40944 -1.0634,5.44007 -1.45325,11.17918 -0.38985,5.73912 -1.49127,11.96944 -2.44758,13.84516 -1.50609,2.95403 -2.42101,3.33282 -6.83704,2.83058 -2.80406,-0.3189 -6.59828,-1.63557 -8.43162,-2.92594 -2.70702,-1.9053 -5.14802,-2.2157 -12.99141,-1.65204 -8.72433,0.62698 -9.83592,1.03131 -11.49753,4.1822 -4.65569,8.82849 -10.13169,18.05648 -10.15357,17.11047 z m 85.41445,-44.40012 c 0.064,-1.55326 0.37992,-1.8692 0.80555,-0.80555 0.38516,0.9625 0.33779,2.1125 -0.10527,2.55555 -0.44305,0.44306 -0.75818,-0.34444 -0.70029,-1.75 z m -51.02194,-4.13304 c 0.9625,-0.38516 2.1125,-0.33779 2.55556,0.10526 0.44306,0.44306 -0.34444,0.75819 -1.75,0.7003 -1.55326,-0.064 -1.8692,-0.37992 -0.80556,-0.80556 z m 57.25001,0.0278 c 0.91666,-0.36988 2.41666,-0.36988 3.33333,0 0.91667,0.36988 0.16667,0.67251 -1.66667,0.67251 -1.83333,0 -2.58333,-0.30263 -1.66666,-0.67251 z"
         id="path1956" />
      <path
         style="fill:#8c8c8c;fill-opacity:1;stroke-width:1.33333"
         d="m 660.65286,571.03626 c -2.42204,-0.64705 -2.25386,-7.55148 0.25765,-10.57766 1.67379,-2.0168 0.32219,-7.62733 -1.55759,-6.46556 -0.6925,0.42799 -0.94378,1.28833 -0.55842,1.91187 1.01636,1.64449 -3.09843,5.34869 -5.94156,5.34869 -2.36447,0 -13.17613,-7.76974 -13.31346,-9.56765 -0.0379,-0.49554 2.32508,0.10446 5.25096,1.33334 3.4228,1.43758 5.3246,3.09942 5.33333,4.66038 0.01,1.74299 0.84779,2.30611 2.97645,2 2.26557,-0.32579 3.21949,-1.68128 4.05315,-5.7594 0.90121,-4.40857 2.14701,-5.97616 7.18482,-9.04066 4.41368,-2.68485 6.55775,-3.32293 7.77395,-2.31358 2.63953,2.19061 3.39019,11.6579 1.24968,15.76079 -1.0311,1.9764 -1.87842,4.69727 -1.88294,6.04639 -0.009,2.54291 -5.00272,7.54153 -7.34155,7.34803 -0.73333,-0.0607 -2.30134,-0.36891 -3.48447,-0.68498 z m -41.13322,-27.48394 c -3.13241,-1.58508 -3.29559,-2.27813 -3.52726,-14.98034 l -0.24291,-13.31837 0.89248,10.70415 c 0.66991,8.03477 1.6553,11.77545 3.95139,15 3.45185,4.84768 3.43921,4.87821 -1.0737,2.59456 z m 23.00135,-17.97094 c 0.0536,-14.98101 0.0465,-15.01482 -4.35008,-20.66667 l -4.4038,-5.6611 5.74735,5.74441 5.74735,5.74442 -0.20538,10.92225 c -0.11296,6.00723 -0.74173,12.72225 -1.39727,14.92225 -0.86107,2.88978 -1.17698,-0.16488 -1.13817,-11.00556 z m -25.2172,-11.61517 c -0.41241,-1.07474 1.17945,-5.42474 3.53746,-9.66667 2.35802,-4.24193 5.15823,-9.3626 6.22268,-11.37927 1.65307,-3.13182 2.77202,-3.66666 7.67106,-3.66666 3.15462,0 7.76067,-0.37302 10.23567,-0.82894 4.29483,-0.79113 4.37842,-0.73228 1.83334,1.29093 -1.55859,1.23899 -5.27017,2.13748 -8.93215,2.16227 -5.51503,0.0373 -6.67285,0.5765 -9.66666,4.50159 -1.87066,2.45255 -3.40119,4.93641 -3.40119,5.51968 0,0.58327 -0.92687,1.73822 -2.0597,2.56657 -1.13283,0.82835 -2.15738,2.80293 -2.27678,4.38796 -0.1194,1.58502 -0.78705,2.5296 -1.48367,2.09907 -0.72739,-0.44955 -0.9465,0.44118 -0.51471,2.09237 0.84711,3.23937 -0.0144,3.92034 -1.16535,0.9211 z m 51.36676,-4.96196 c -2.4684,-4.61225 -5.39841,-7.83416 -13.86655,-15.24804 -2.2,-1.9261 -3.1,-2.89824 -2,-2.16031 1.1,0.73793 4.29422,1.59748 7.09828,1.91011 4.41064,0.49174 5.33279,0.10842 6.83704,-2.842 0.95631,-1.87572 2.05773,-8.10604 2.44758,-13.84516 0.38985,-5.73911 1.01578,-10.74171 1.39096,-11.11688 0.37517,-0.37517 4.47953,-0.88776 9.1208,-1.13908 4.64127,-0.25132 6.82315,-0.1622 4.84862,0.19805 -4.81613,0.8787 -6.78902,6.9893 -5.66359,17.54182 0.59897,5.6163 0.21625,10.21033 -1.27916,15.35437 -1.17363,4.03712 -2.13386,8.53369 -2.13386,9.99237 0,1.45867 -0.94908,3.01633 -2.10905,3.46145 -2.95788,1.13505 -2.95559,1.13607 -4.69107,-2.1067 z m 24.8019,-45.08109 c -0.5115,-0.82763 1.82618,-1.33622 6.14175,-1.33622 8.08068,0 8.17109,0.60793 0.27027,1.81734 -3.25907,0.49888 -5.93022,0.29846 -6.41202,-0.48112 z m -38.33512,-2.21926 c 0.91667,-0.36988 2.41667,-0.36988 3.33333,0 0.91667,0.36988 0.16667,0.67251 -1.66666,0.67251 -1.83334,0 -2.58334,-0.30263 -1.66667,-0.67251 z m 19.64838,-1.80384 c -1.33738,-1.47778 -4.75047,-3.05768 -7.58466,-3.51089 -2.83418,-0.4532 -4.88795,-1.08912 -4.56392,-1.41314 1.54691,-1.5469 13.44582,1.60639 16.62332,4.4053 3.33468,2.93736 3.3789,3.12382 0.7502,3.16347 -1.53634,0.0232 -3.88757,-1.16696 -5.22494,-2.64474 z m 39.10162,1.77606 c 0.9625,-0.38516 2.1125,-0.33779 2.55556,0.10526 0.44305,0.44306 -0.34445,0.75819 -1.75,0.7003 -1.55326,-0.064 -1.8692,-0.37992 -0.80556,-0.80556 z"
         id="path1954" />
      <path
         style="fill:#767676;fill-opacity:1;stroke-width:1.33333"
         d="m 668.47067,569.32885 c 1.65,-1.37648 3.00369,-3.60652 3.00821,-4.95564 0.005,-1.34912 0.85184,-4.06999 1.88294,-6.04639 2.14051,-4.10289 1.38985,-13.57018 -1.24968,-15.76079 -1.2162,-1.00935 -3.36027,-0.37127 -7.77395,2.31358 -5.03781,3.0645 -6.28361,4.63209 -7.18482,9.04066 -0.83366,4.07812 -1.78758,5.43361 -4.05315,5.7594 -2.12628,0.30576 -2.96931,-0.25896 -2.98564,-2 -0.0226,-2.40889 -4.81829,-4.86209 -20.29373,-10.3811 -9.95372,-3.5498 -12.35019,-8.00857 -12.35019,-22.9783 0,-8.35778 0.55783,-12.81901 1.75055,-14 1.44394,-1.42973 1.50232,-1.0759 0.33334,2.02014 -2.35564,6.23885 -1.72406,17.06024 1.28363,21.99343 3.71411,6.09187 10.91158,8.99105 17.45446,7.03076 4.42002,-1.32427 5.05056,-2.07726 5.88745,-7.03074 0.5155,-3.0512 0.95407,-9.61208 0.9746,-14.57972 0.0372,-9.00065 0.0149,-9.05552 -6.4165,-15.76631 -3.54962,-3.70382 -7.03968,-6.73422 -7.7557,-6.73422 -0.71602,0 -2.53751,1.05 -4.04776,2.33333 -2.08258,1.76967 -1.90826,1.206 0.7216,-2.33333 2.92268,-3.93342 4.38515,-4.72403 9.30759,-5.0317 3.21204,-0.20077 7.16232,-1.0373 8.77839,-1.85896 2.51338,-1.27788 3.6703,-0.8854 8,2.71398 7.70459,6.405 10.21048,8.85423 12.39502,12.11476 4.36268,6.51148 4.77216,6.86023 7.03518,5.99183 1.26398,-0.48504 2.29816,-2.07535 2.29816,-3.53402 0,-1.45868 0.96023,-5.95525 2.13386,-9.99237 1.49541,-5.14404 1.87813,-9.73807 1.27916,-15.35437 -1.07169,-10.04864 0.93889,-16.95949 5.02371,-17.26773 14.40399,-1.0869 18.03256,-0.68001 18.73104,2.1004 0.68387,2.72225 0.65613,2.72667 -1.23409,0.19667 -1.06353,-1.4235 -1.93368,-1.93503 -1.93368,-1.13674 0,0.79829 -1.95,1.36297 -4.33334,1.25484 -3.94642,-0.17904 -4.34361,0.16055 -4.44843,3.80341 -0.0633,2.2 -0.564,8.07743 -1.11266,13.06097 -0.6932,6.29649 -0.52136,9.63475 0.56322,10.94159 0.85843,1.03434 1.13432,2.57064 0.6131,3.414 -0.52122,0.84335 -1.0945,7.61964 -1.27394,15.0584 -0.17945,7.43877 -0.71194,16.22503 -1.18331,19.52503 -0.47138,3.3 -1.10584,8.1 -1.40991,10.66667 -0.96159,8.11678 -2.06795,11.96275 -5.77874,20.08823 l -3.61318,7.91177 -6.01141,-0.0444 -6.0114,-0.0444 z M 655.41312,551.2536 c 3.75625,-9.26779 4.55185,-49.21196 1.03573,-51.99999 -0.92484,-0.73334 -2.74803,-3.00002 -4.05154,-5.03707 -2.22212,-3.4726 -2.55152,-3.57661 -5.27834,-1.66667 -1.59958,1.12039 -5.11865,2.03707 -7.82016,2.03707 -4.23369,0 -4.81681,0.36335 -4.2236,2.63179 0.37853,1.44748 3.36237,5.09672 6.63077,8.10943 l 5.94253,5.47763 -0.55298,12.22391 c -0.68617,15.16783 -1.10779,16.8299 -4.76592,18.78767 -2.87117,1.5366 -2.83054,1.62255 1.81395,3.83735 2.613,1.24605 5.66596,2.26555 6.78436,2.26555 1.1184,0 1.64156,0.6341 1.16258,1.40911 -0.47899,0.77502 -0.44042,3.02502 0.0857,5 0.61743,2.31773 1.16924,2.88179 1.55636,1.59089 0.32987,-1.1 1.08613,-3.2 1.68057,-4.66667 z m -7.94246,-56.74535 c 0,-0.77661 0.6,-1.0412 1.33334,-0.58798 0.73333,0.45323 1.33333,1.08864 1.33333,1.41202 0,0.32339 -0.6,0.58798 -1.33333,0.58798 -0.73334,0 -1.33334,-0.63541 -1.33334,-1.41202 z m 61.45513,30.74535 c -0.0311,-1.1 0.49474,-4.4 1.16861,-7.33333 0.67387,-2.93333 1.59664,-8.33333 2.05062,-12 1.28635,-10.38969 6.01814,-28.22166 5.98521,-22.55555 -0.042,7.23448 -9.02786,48.12844 -9.20444,41.88888 z M 620.804,506.66563 c 0,-0.69006 0.59313,-1.62122 1.31806,-2.06925 0.75581,-0.46712 0.97934,0.0681 0.52401,1.25464 -0.88638,2.30989 -1.84207,2.73252 -1.84207,0.81461 z m 97.51148,-35.60271 c -0.18763,-5.81816 -1.60074,-7.14265 -7.62053,-7.14265 -2.30272,0 -3.22428,0.7397 -3.22428,2.58798 0,1.42339 -0.69452,3.01721 -1.54337,3.54183 -1.05758,0.65362 -1.30656,0.0483 -0.79101,-1.92315 0.41379,-1.58235 0.20831,-2.54077 -0.45664,-2.12981 -0.66494,0.41096 -1.20898,0.12322 -1.20898,-0.63942 0,-0.76264 1.35,-1.65919 3,-1.99232 7.0286,-1.41907 12.98614,-1.87254 13.45273,-1.02398 0.27587,0.50171 0.067,3.91221 -0.46409,7.57887 l -0.96568,6.66667 z m -54.17815,-9.69515 5.33334,-0.84076 -4.26713,-2.30337 c -2.34691,-1.26685 -6.84691,-2.39939 -10,-2.51675 -4.96627,-0.18485 -5.14866,-0.28565 -1.36392,-0.7538 6.44496,-0.79721 18.31934,2.04445 21.02191,5.03076 2.31617,2.55934 2.20102,2.59991 -6.85088,2.41388 -7.68942,-0.15802 -8.32773,-0.32776 -3.87332,-1.02996 z m -36,-4.11416 c 0.45323,-0.73334 1.83864,-1.32415 3.07869,-1.31292 1.94303,0.0176 1.97823,0.19905 0.25464,1.31292 -2.61116,1.68746 -4.37624,1.68746 -3.33333,0 z m 9,-2.25244 c 1.28333,-0.33537 3.38333,-0.33537 4.66667,0 1.28333,0.33537 0.23333,0.60977 -2.33334,0.60977 -2.56666,0 -3.61666,-0.2744 -2.33333,-0.60977 z"
         id="path1952" />
      <path
         style="fill:#606060;fill-opacity:1;stroke-width:1.33333"
         d="m 678.34993,569.78932 c 6.37474,-13.45317 7.451,-16.71508 8.53547,-25.86905 0.30407,-2.56667 0.93853,-7.36667 1.40991,-10.66667 0.47137,-3.3 1.00386,-12.08626 1.18331,-19.52503 0.17944,-7.43876 0.75272,-14.21505 1.27394,-15.0584 0.52122,-0.84336 0.24533,-2.37966 -0.6131,-3.414 -1.08458,-1.30684 -1.25642,-4.6451 -0.56322,-10.94159 0.54866,-4.98354 1.04935,-10.86097 1.11266,-13.06097 0.10482,-3.64286 0.50201,-3.98245 4.44843,-3.80341 2.46588,0.11187 4.35081,-0.46273 4.37388,-1.33333 0.0223,-0.84146 0.67554,-0.43807 1.45165,0.89643 1.36452,2.34627 1.47104,2.34627 3.22647,0 1.67307,-2.23616 1.75185,-2.17486 1.00499,0.78214 -0.56552,2.23901 -0.34404,2.92027 0.73298,2.25464 0.84885,-0.52462 1.54337,-2.11844 1.54337,-3.54183 0,-1.93931 0.91903,-2.58286 3.66666,-2.56756 6.58511,0.0367 7.3891,1.43658 6.59895,11.49005 -0.39579,5.03591 -1.59085,12.1562 -2.65569,15.82287 -1.06483,3.66666 -2.3171,9.66666 -2.78282,13.33333 -2.23529,17.59882 -5.05567,28.66033 -10.91591,42.81213 -4.77513,11.53138 -7.44138,16.21929 -10.59112,18.62171 -4.22357,3.22148 -13.51528,6.0361 -12.44081,3.76854 z m -26.1971,-15.55303 c -0.62369,-2.34469 -0.36897,-4.42016 0.70065,-5.70898 2.36056,-2.8443 -0.55122,-12.84246 -3.41957,-11.74177 -1.07979,0.41435 -1.96325,1.2401 -1.96325,1.835 0,0.5949 -0.34732,1.98675 -0.77183,3.093 -0.5009,1.30533 0.55217,2.72896 3,4.05566 5.32843,2.88797 0.53373,2.78916 -5.55527,-0.11448 -4.64449,-2.2148 -4.68512,-2.30075 -1.81395,-3.83735 3.65813,-1.95778 4.07975,-3.61984 4.76592,-18.78767 l 0.55298,-12.22391 -5.94253,-5.47764 c -3.2684,-3.0127 -6.25224,-6.66194 -6.63077,-8.10942 -0.60684,-2.32055 -0.006,-2.63179 5.0779,-2.63179 9.2447,0 12.40989,2.37433 8.44746,6.33676 -1.16012,1.16012 -2.34792,0.8987 -4.84648,-1.06667 -6.47991,-5.0971 -7.41877,-2.83747 -1.63252,3.92909 3.79625,4.43942 3.94576,4.48671 7.27915,2.30259 2.08088,-1.36344 3.40328,-3.47082 3.40328,-5.42346 0,-4.23448 -1.34485,-7.5619 -2.71425,-6.71557 -0.60582,0.37442 -1.45274,0.11243 -1.88204,-0.58219 -0.4293,-0.69463 -0.19712,-1.62353 0.51596,-2.06424 0.71308,-0.44071 2.36462,0.86783 3.67008,2.90787 1.30547,2.04003 3.13026,4.30915 4.0551,5.04249 3.51612,2.78803 2.72052,42.7322 -1.03573,51.99999 -0.59444,1.46667 -1.3507,3.56667 -1.68057,4.66667 -0.38238,1.27508 -0.95496,0.66471 -1.57972,-1.68398 z m 5.39633,-95.02509 c -2.92186,-2.20998 -16.0294,-2.67066 -21.10299,-0.74168 -1.75896,0.66875 -3.9773,0.73435 -4.92964,0.14577 -5.78258,-3.57383 26.26743,-4.32522 33.12951,-0.7767 2.28688,1.18259 4.15796,2.43476 4.15796,2.78259 0,1.49072 -8.89269,0.37667 -11.25484,-1.40998 z"
         id="path1950" />
      <path
         style="fill:#494949;fill-opacity:1;stroke-width:1.33333"
         d="m 649.73855,545.73766 c -2.96207,-1.56443 -3.54398,-2.57427 -2.82029,-4.89426 1.53239,-4.91255 3.74642,-5.2047 5.62005,-0.74157 2.63123,6.26778 1.75112,8.03941 -2.79976,5.63583 z m -8.06479,-42.57608 c -4.52225,-5.66767 -3.68109,-7.5022 1.63704,-3.57033 4.38902,3.24495 6.81348,1.96868 6.84695,-3.60431 0.0161,-2.68476 0.29231,-2.97927 1.31291,-1.4 2.30243,3.56275 1.50634,9.06094 -1.63,11.25773 -3.92339,2.74804 -3.80142,2.78812 -8.1669,-2.68309 z m -2.2031,-43.11686 c -5.21994,-0.70328 -5.56663,-0.9349 -2.66666,-1.78154 5.80892,-1.69591 17.98525,-1.13947 20.74516,0.94802 2.37131,1.79357 1.97371,1.94437 -4.74516,1.79974 -4.03334,-0.0868 -10.03334,-0.52162 -13.33334,-0.96622 z"
         id="path1948" />
    </g>
  </g>
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-884.09325,-331.24809)">
    <text
       xml:space="preserve"
       style="font-size:42.6667px;line-height:1.25;font-family:Calibri;-inkscape-font-specification:Calibri;letter-spacing:0px;word-spacing:0px;fill:#4caf50;fill-opacity:1;filter:url(#filter9463)"
       x="940.00397"
       y="547.9201"
       id="text1649"
       inkscape:export-filename="C:\Users\mathi\Documents\GitHub\website\images\coffee-logo.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96"
       transform="matrix(1.1721363,0,0,1.3961164,-179.56076,-159.99037)"><tspan
         sodipodi:role="line"
         id="tspan1647"
         x="940.00397"
         y="547.9201"
         style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-family:Poppins;-inkscape-font-specification:'Poppins Bold';fill:#4caf50;fill-opacity:1">Daily Update</tspan></text>
    <image
       width="126.66667"
       height="133.33333"
       preserveAspectRatio="none"
       xlink:href="Coffee-mug.png"
       id="image1942"
       x="602.13733"
       y="450.58694" />
  </g>
  <script
     id="mesh_polyfill"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
</svg>
